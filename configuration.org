#+TITLE: Emacs configuration
#+AUTHOR: Hieu Phan

* How to use


* Add package repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+END_SRC


* Security
Getting hints from [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your Text Editor Is Malware]].

** Check TLS
#+BEGIN_SRC emacs-lisp
(setq tls-checktrust t)
(setq gnutls-verify-error t)
#+END_SRC


* Automatic installing packages
** Install =use-package= and its dependencies if needed
#+BEGIN_SRC emacs-lisp
(mapc
  (lambda (package)
    (if (not (package-installed-p package))
      (progn
        (package-refresh-contents)
        (package-install package))))
  '(use-package diminish bind-key))
#+END_SRC

** Trigger =use-package= and force the install of missing packages
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
(setq use-package-always-ensure t)
#+END_SRC


* Configure Evil mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package evil :ensure t
  :init
  (evil-mode 1))
#+END_SRC

* Configure Ivy
** =flx= fuzzy matching
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flx :ensure t)
#+END_SRC
** =ivy=
#+BEGIN_SRC emacs-lisp
(use-package ivy :ensure t
  :init
  (ivy-mode 1)
  :config
  (setq ivy-use-virtual-buffers  t
        ivy-height 20  ;; The number of candicate matches displayed in the minibuffer
        ivy-count-format "(%d/%d) "
	enable-recrusive-minibuffers t
        ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                (t      . ivy--regex-plus))
  )
)
#+END_SRC
** =swiper=
#+BEGIN_SRC emacs-lisp
(use-package swiper :ensure t)
#+END_SRC
** =counsel=
#+BEGIN_SRC emacs-lisp
(use-package counsel :ensure t)
#+END_SRC

* Required packages
** =avy=
#+BEGIN_SRC emacs-lisp
(use-package avy :ensure t
  :init
  (avy-setup-default)
)
#+END_SRC
** =company-mode= for text completion
#+BEGIN_SRC emacs-lisp
(use-package company :ensure t
  :init
   (add-hook 'after-init-hook 'global-company-mode)
)
#+END_SRC
** =which-key= package key navigation
#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t
  :init
  (which-key-mode)
  :config
  (setq which-key-sort-order 'which-key-key-order-alpha
        which-key-side-window-max-width 0.333
        which-key-idle-delay 0.4)
  (which-key-setup-minibuffer)
)
#+END_SRC
** =winum= to navigate between windows by number (SPC 1)
#+BEGIN_SRC emacs-lisp
(use-package winum :ensure t
  :config
  (winum-mode))
#+END_SRC
** =magit=
#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t
  :commands
  (magit-status)
  :init
  (progn
    (setenv "SSH_ASKPASS" "git-gui--askpass")
  )
  :config
  (setq magit-completing-read-function 'ivy-completing-read)
)
#+END_SRC
** =evil-magit=
   This package requires both evil and magit.
#+BEGIN_SRC emacs-lisp
(use-package evil-magit :ensure t)
#+END_SRC
** =restart-emacs=
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs :ensure t
  :commands
  (restart-emacs)
)
#+END_SRC

* General config for development
** Trim whitespaces before save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** =fill-column-indicator=
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator :ensure t
  :init
  (progn
    (setq fci-rule-width 1)
    (setq fci-rule-color "#D0BF8F")
    (setq fci-rule-column 80)
    ;; Enable fci-mode as global minor mode
    (define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
    (global-fci-mode)
  )
)
#+END_SRC
** =whitespace= mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package whitespace :ensure t
  :init
  (global-whitespace-mode t)
  :config
  (setq whitespace-style '(face empty tabs lines-tail trailing))
)
#+END_SRC
** =smartparens= for dealing with pairs
#+BEGIN_SRC emacs-lisp
(use-package smartparens :ensure t
  :init
  (progn
   (require 'smartparens-config)
   (show-smartparens-global-mode +1)
   (smartparens-global-mode 1)
  )
)
#+END_SRC
** =highlight-parentheses= by color
#+BEGIN_SRC emacs-lisp
(use-package highlight-parentheses :ensure t
  :init
  (global-highlight-parentheses-mode)
)
#+END_SRC
** =sr-speedbar= to browser source tree
#+BEGIN_SRC emacs-lisp :tangle no
(use-package sr-speedbar :ensure t
  :config
  (setq sr-speedbar-skip-other-window-p t)
)
#+END_SRC
** =projectile= for project management
#+BEGIN_SRC emacs-lisp
(use-package projectile :ensure t
  :init
   (projectile-global-mode)
  :config
   (setq projectile-completion-system 'ivy)
)
#+END_SRC


* C++ developement environment
** =company-c-headers= auto-completion C/C++ headers for company
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-c-headers :ensure t
  :init
   (add-to-list 'company-backends 'company-c-headers)
  :config
  (progn
    (when (eq system-type 'darwin)
      (add-to-list 'company-c-headers-path-system "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/usr/include/c++/4.2.1/")
    )
  )
)
#+END_SRC

** =google-c-style=
#+BEGIN_SRC emacs-lisp
(use-package google-c-style :ensure t
  :init
  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)
)
#+END_SRC

** =smartparens=
#+BEGIN_SRC emacs-lisp
(use-package smartparens :ensure t
  :init
  ;; when you press RET, the curly braces automatically
  ;; add another newline
  (sp-with-modes '(c-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET")))
  )
)
#+END_SRC


* GN developement environment
#+BEGIN_SRC emacs-lisp
(setq gn_file_path "extra/gn.el")
(load-file (expand-file-name gn_file_path
                            (file-name-directory (or load-file-name buffer-file-name))))
#+END_SRC
* Binding keys
#+BEGIN_SRC emacs-lisp
(use-package general :ensure t
  :config
  (general-define-key
  "C-s" 'swiper
  "M-x" 'counsel-M-x
  "C-x C-f" 'counsel-find-file
  "C-h f" 'counsel-describe-function
  "C-h v" 'counsel-describe-variable

  ;; Jumping
  "M-g c" 'avy-goto-char
  ;; "C-;" 'avy-goto-char-2
  "M-g f" 'avy-goto-line
  "M-g w" 'avy-goto-word-1
  "M-g s" 'counsel-imenu
  )
)
#+END_SRC

* Configure UI
** Theme
#+BEGIN_SRC emacs-lisp
(use-package dracula-theme :ensure t
  :config
  (load-theme 'dracula t))
#+END_SRC
** Font
Use the Hack font from [[https://github.com/chrissimpkins/Hack][chrissimpkins]].
#+BEGIN_SRC emacs-lisp
(if (condition-case nil
        (x-list-fonts "Hack")
      (error nil))
    (progn
      (add-to-list 'default-frame-alist '(font . "Hack-12"))
      (set-face-attribute 'default nil :font "Hack-12")))
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline :ensure t
  :config
  (powerline-default-theme)
)
#+END_SRC
** Disable toolbar and menubar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC
** Disable scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Disable splash screen
#+BEGIN_SRC emacs-lisp :tangle no
(setq inhibit-startup-message t)
#+END_SRC
** Disable the bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-funcion 'ignore)
#+END_SRC
** Ask for confirmation before quitting
#+BEGIN_SRC emacs-lisp :tangle no
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
** Highlight the current line
#+BEGIN_SRC emacs-lisp
(when window-system
  (global-hl-line-mode))
#+END_SRC
** Show line number
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
#+END_SRC
** Show ruler at 80

* Startup behavior
** Toggle fullscreen by default
#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC
** Empty scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC
